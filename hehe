import random

array = []

for i in range(10):
    l = []

    for j in range(10):
        n = random.randint(1, 9)
        if n == 9:
            l.append(1)
        else:
            l.append(0)

    array.append(l)

array[0][0] = 0
array[9][9] = 2

for i in range(10):
  print(array[i])

# * * * * *

table = []
l = []
actions = ['up', 'down', 'left', 'right']

print(" ↑  ↓  ←  →")

for i in range(100):
    l = []

    for j in range(4):
        l.append(0)

    table.append(l)

learning_rate = 0.003
gamma = 0.9
epsilon = 0.1
curr_x = 0
curr_y = 0

def check_available(x, y):
    a_a = ['up', 'down', 'left', 'right']

    if x == 0:
        a_a.pop(2)
    if y == 0:
        a_a.pop(0)
    if x == 9:
        a_a.pop(3)
    if y == 9:
        a_a.pop(1)

    return a_a
def epsilon_greedy(x, y):
    a_a = check_available(x, y)
    #print(available_actions, x, y)

    if random.random() >= epsilon:
        #print(random.choice(available_actions))
        return random.choice(a_a)
    else:
        new_actions = []
        if 'left' in a_a:
            if array[y][x - 1] == 2:
                return 'left'
            elif array[y][x - 1] != 1:
                new_actions.append('left')

        if 'right' in a_a:
            if array[y][x + 1] == 2:
                return 'right'
            elif array[y][x + 1] != 1:
                new_actions.append('right')

        if 'up' in a_a:
            if array[y - 1][x] == 2:
                return 'up'
            elif array[y - 1][x] != 1:
                new_actions.append('up')

        if 'down' in a_a:
            if array[y + 1][x] == 2:
                return 'down'
            elif array[y + 1][x] != 1:
                new_actions.append('down')

        if len(new_actions) > 0:
            return random.choice(new_actions)

        return random.choice(a_a)

def update_row_col(a, b, c, e, f):
    if a == 'left':
        e = curr_x - 1

        if array[f][e] == 1:
            b = -10
        elif array[f][e] == 2:
            b = 5

        c -= 1

    elif a == 'right':
        e = curr_x + 1

        if array[f][e] == 1:
            b = -10
        elif array[f][e] == 2:
            b = 5

        c += 1

    elif a == 'up':
        f = curr_y - 1
        f = 0

        if array[f][e] == 1:
            b = -10
        elif array[f][e] == 2:
            b = 5

        c -= 10

    elif a == 'down':
        f = curr_y + 1

        if array[f][e] == 1:
            b = -10
        elif array[f][e] == 2:
            b = 5

        c += 10

    return e, f, b, c

curr_s = 0
next_s = 0
next_x = 0
next_y = 0
curr_col = 0

while next_x != 9 and next_y != 9:
    curr_a = epsilon_greedy(curr_x, curr_y)
    #print(curr_a)
    reward = 0

    next_x, next_y, reward, next_s = update_row_col(curr_a, reward, curr_s, next_x, next_y)

    table[curr_s][curr_col] += (learning_rate * (reward + (gamma * max(table[next_s])) - table[curr_s][curr_col]))
    print(curr_s, curr_col)
    print(curr_x, curr_y)
    print(check_available(curr_x, curr_y))
    print(curr_a)

    curr_x = next_x
    curr_y = next_y
    curr_s = next_s

    #for i in range(100):
    #    print(table[i])
    #print()
