import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

plt.figure()
plt.imshow(train_images[0])
#plt.show()
print('Image of a hand-written number ', train_labels[0])

plt.figure()
plt.imshow(train_images[1])
#plt.show()
print('Image of a hand-written number ', train_labels[1])

for row in train_images[1]:
  for pixel in row:
    print(pixel, end=' ')
  print('\n')

model = keras.Sequential([
    layers.Dense(784, activation="relu"),
    layers.Dense(128, activation="relu"),
    layers.Dense(10, activation="softmax")
])

model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=0.001),
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype("float32") / 255
test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype("float32") / 255

model.fit(train_images, train_labels, epochs=5, batch_size=128)
test_loss, test_acc = model.evaluate(test_images, test_labels)

print(f"test_acc: {test_acc}")

predictions = model.predict(test_images)
predictions = np.argmax(predictions, axis=1)
results = confusion_matrix(test_labels, predictions, normalize="pred")
display = ConfusionMatrixDisplay(confusion_matrix=results)
#print(results)
display.plot()
plt.show()
