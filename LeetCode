#Two Sum
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        ans = []

        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[i] + nums[j] == target:
                    ans.append(i)
                    ans.append(j)

        return ans

#Palindrome Number
class Solution:
    def isPalindrome(self, x: int) -> bool:
        s = ""
        x = str(x)

        for i in range(len(x) - 1, -1, -1):
            s += x[i]
        
        if s == x:
            return True

        return False

#Reverse Integer
class Solution:
    def reverse(self, x: int) -> int:
        if x < 0:
            new = '-'
        else:
            new = ''
        
        x = str(x)

        for i in range(len(x) - 1, -1, -1):
            if x[i] != '-':
                new += x[i]

        if int(new) > 2**31 or int(new) < -(2**31):
            return 0

        return int(new)

#Find the Index of the First Occurrence in a String
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return haystack.find(needle)

#Search Insert Position
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        if nums.count(target) > 0:
            return nums.index(target)
        
        for i in nums:
            if i > target:
                return nums.index(i)

        return len(nums)

#Pow(x, n)
class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n

#Length of Last Word
class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        index = len(s) - 1

        while s[index] == " ":
            index -= 1

        counter = 0

        while s[index] != ' ' and index >= 0:
            counter += 1
            index -= 1

        return counter
